<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



<title type="text">CDSLab Recipes - A repository for all sorts of problems with solutions</title>
<generator uri="https://github.com/shahmoradi/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="https://www.cdslab.org/recipes/feed.xml" />
<link rel="alternate" type="text/html" href="https://www.cdslab.org/recipes/" />
<updated>2021-10-01T12:50:31-05:00</updated>
<id>https://www.cdslab.org/recipes/</id>
<author>
  <name>Amir Shahmoradi</name>
  <uri>https://www.cdslab.org/recipes/</uri>
  <email>shahmoradi@utexas.edu</email>
</author>


<entry>
  <title type="html"><![CDATA[Computing the Pearson correlation coefficient of a dataset]]></title>
  
  <link rel="alternate" type="text/html" href="https://www.cdslab.org/recipes/programming/stat-corcoef-pearson/stat-corcoef-pearson"/>
  <id>https://www.cdslab.org/recipes/programming/stat-corcoef-pearson/stat-corcoef-pearson</id>
  <published>2021-09-29T00:00:00-05:00</published>
  <updated>2019-07-04T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>https://www.cdslab.org/recipes</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  <category scheme="https://www.cdslab.org/recipes/tags/#statistics" term="statistics" /><category scheme="https://www.cdslab.org/recipes/tags/#sample" term="sample" /><category scheme="https://www.cdslab.org/recipes/tags/#Pearson" term="Pearson" /><category scheme="https://www.cdslab.org/recipes/tags/#correlation" term="correlation" /><category scheme="https://www.cdslab.org/recipes/tags/#warming" term="warming" /><category scheme="https://www.cdslab.org/recipes/tags/#Python" term="Python" />
  <content type="html">
  
    
&lt;div style=&quot;text-align:center;margin-top:3rem;margin-bottom:2rem;&quot;&gt;
    
        &lt;a href=&quot;#problem&quot; style=&quot;display:inline-block;&quot;&gt;
            &lt;h2 id=&quot;problem&quot; style=&quot;color:red;&quot;&gt;
                Problem
            &lt;/h2&gt;
        &lt;/a&gt;
    
&lt;/div&gt;

&lt;p&gt;Recall the &lt;a href=&quot;globalLandTempHist.txt&quot; target=&quot;blank&quot;&gt;globalLandTempHist.txt&lt;/a&gt; dataset that consisted of the global land temperature of Earth over the past 300 years. 
Also recall the equation for the Pearson‚Äôs correlation coefficient, between two attributes of a dataset.&lt;/p&gt;

\[r_{xy} = 
\frac{
    \sum_1^{n} ~ (x_i-\overline{x})(y_i-\overline{y})
}{
    \sqrt{\sum_1^{n} ~ (x_i-\overline{x})^2} ~\sqrt{\sum_1^{n} ~ (y_i-\overline{y})^2}
}\]

&lt;p&gt;where $n$ represents the number of data points. We wish to compute the Pearson correlation coefficient between the &lt;code&gt;year&lt;/code&gt; and the &lt;code&gt;temperature anomaly&lt;/code&gt; attribute in the land temperature data mentioned in the above. To do so, we will take the following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Write a function named &lt;code&gt;getPearsonCor(data1,data2)&lt;/code&gt; that return the Pearson correlation coefficient according to the equation in the above.&lt;/li&gt;
  &lt;li&gt;Now, read the dataset (using Pandas Python library, for example) and make sure to exlude lines of data that contain &lt;code&gt;nan&lt;/code&gt; values. If you are using Python, you can get help from Pandas &lt;code&gt;dropna()&lt;/code&gt; method to remove rows of data with &lt;code&gt;nan&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Now, pass the two columns of data to your function to compute the Pearson correlation coefficient. You should obtain a positive correlation indicating that the global land temperature has increased with time over the past 300 years.&lt;/li&gt;
  &lt;li&gt;Now, use the Pearson correlation coefficient calculator from an established library in the language of your choice to verify your calculation of the Pearson correlation. Within Python, you can use Numpy‚Äôs &lt;code&gt;corrcoef()&lt;/code&gt; function to compute the correlation.&lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/stat-corcoef-pearson/stat-corcoef-pearson&quot;&gt;Computing the Pearson correlation coefficient of a dataset&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;https://www.cdslab.org/recipes&quot;&gt;CDSLab Recipes - A repository for all sorts of problems with solutions&lt;/a&gt; on September 29, 2021.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Computing the Kendall's rank correlation coefficient of a dataset]]></title>
  
  <link rel="alternate" type="text/html" href="https://www.cdslab.org/recipes/programming/stat-corcoef-kendall/stat-corcoef-kendall"/>
  <id>https://www.cdslab.org/recipes/programming/stat-corcoef-kendall/stat-corcoef-kendall</id>
  <published>2021-09-29T00:00:00-05:00</published>
  <updated>2019-07-04T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>https://www.cdslab.org/recipes</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  <category scheme="https://www.cdslab.org/recipes/tags/#statistics" term="statistics" /><category scheme="https://www.cdslab.org/recipes/tags/#sample" term="sample" /><category scheme="https://www.cdslab.org/recipes/tags/#Kendall's" term="Kendall's" /><category scheme="https://www.cdslab.org/recipes/tags/#correlation" term="correlation" /><category scheme="https://www.cdslab.org/recipes/tags/#warming" term="warming" /><category scheme="https://www.cdslab.org/recipes/tags/#Python" term="Python" />
  <content type="html">
  
    
&lt;div style=&quot;text-align:center;margin-top:3rem;margin-bottom:2rem;&quot;&gt;
    
        &lt;a href=&quot;#problem&quot; style=&quot;display:inline-block;&quot;&gt;
            &lt;h2 id=&quot;problem&quot; style=&quot;color:red;&quot;&gt;
                Problem
            &lt;/h2&gt;
        &lt;/a&gt;
    
&lt;/div&gt;

&lt;p&gt;Recall the &lt;a href=&quot;globalLandTempHist.txt&quot; target=&quot;blank&quot;&gt;globalLandTempHist.txt&lt;/a&gt; dataset that consisted of the global land temperature of Earth over the past 300 years. 
Also recall the equation for the Kendall‚Äôs rank correlation coefficient, between two attributes of a dataset.&lt;/p&gt;

\[\tau_{xy} = 
\frac{
    \text{#concordant pairs} - \text{#discordant pairs}
}{
    \sqrt{\text{#concordant pairs} + \text{#discordant pairs} + \text{#extra-$y$}} ~ \sqrt{\text{#concordant pairs} + \text{#discordant pairs} + \text{#extra-$x$}}
}\]

&lt;p&gt;where the concordance and discordance of a pair of data points is determined according to the following partitioning of the space for a given point.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;concordance.png&quot; alt=&quot;concordance.png&quot; width=&quot;700&quot; /&gt; 
    &lt;caption&gt;
        All points in the gray area are concordant and all points in the white area are discordant with respect to point (ùëã_1,ùëå_1). With ùëÅ=30 points, there are a total of 435 possible point pairs. In this example there are 395 concordant point pairs and 40 discordant point pairs, leading to a Kendall rank correlation coefficient of 0.816.
    &lt;/caption&gt;
&lt;/figure&gt;

&lt;p&gt;where $n$ represents the number of data points. We wish to compute the Kendall‚Äôs rank correlation coefficient between the &lt;code&gt;year&lt;/code&gt; and the &lt;code&gt;temperature anomaly&lt;/code&gt; attribute in the land temperature data mentioned in the above. To do so, we will take the following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Write a function named &lt;code&gt;getKendallCor(data1,data2)&lt;/code&gt; that return the Kendall‚Äôs rank correlation coefficient according to the equation in the above.&lt;/li&gt;
  &lt;li&gt;Now, read the dataset (using Pandas Python library, for example) and make sure to exlude lines of data that contain &lt;code&gt;nan&lt;/code&gt; values. If you are using Python, you can get help from Pandas &lt;code&gt;dropna()&lt;/code&gt; method to remove rows of data with &lt;code&gt;nan&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Now, pass the two columns of data to your function to compute the Kendall‚Äôs rank correlation coefficient. You should obtain a positive correlation indicating that the global land temperature has increased with time over the past 300 years.&lt;/li&gt;
  &lt;li&gt;Now, use the Kendall‚Äôs rank correlation coefficient calculator from an established library in the language of your choice to verify your calculation of the Kendall‚Äôs rank correlation. Within Python, you can use Scipy‚Äôs &lt;code&gt;stats.kendalltau()&lt;/code&gt; function to compute the correlation.&lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/stat-corcoef-kendall/stat-corcoef-kendall&quot;&gt;Computing the Kendall's rank correlation coefficient of a dataset&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;https://www.cdslab.org/recipes&quot;&gt;CDSLab Recipes - A repository for all sorts of problems with solutions&lt;/a&gt; on September 29, 2021.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Visualizing the average precipitation among the US states]]></title>
  
  <link rel="alternate" type="text/html" href="https://www.cdslab.org/recipes/programming/visualization-avg-precipitation-choropleth/visualization-avg-precipitation-choropleth"/>
  <id>https://www.cdslab.org/recipes/programming/visualization-avg-precipitation-choropleth/visualization-avg-precipitation-choropleth</id>
  <published>2021-09-19T00:00:00-05:00</published>
  <updated>2019-07-04T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>https://www.cdslab.org/recipes</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  <category scheme="https://www.cdslab.org/recipes/tags/#MATLAB" term="MATLAB" /><category scheme="https://www.cdslab.org/recipes/tags/#Python" term="Python" /><category scheme="https://www.cdslab.org/recipes/tags/#visualization" term="visualization" /><category scheme="https://www.cdslab.org/recipes/tags/#data" term="data" /><category scheme="https://www.cdslab.org/recipes/tags/#pandas" term="pandas" /><category scheme="https://www.cdslab.org/recipes/tags/#input" term="input" /><category scheme="https://www.cdslab.org/recipes/tags/#output" term="output" /><category scheme="https://www.cdslab.org/recipes/tags/#choropleth" term="choropleth" /><category scheme="https://www.cdslab.org/recipes/tags/#matplotlib" term="matplotlib" /><category scheme="https://www.cdslab.org/recipes/tags/#figure" term="figure" /><category scheme="https://www.cdslab.org/recipes/tags/#usa" term="usa" />
  <content type="html">
  
    
&lt;div style=&quot;text-align:center;margin-top:3rem;margin-bottom:2rem;&quot;&gt;
    
        &lt;a href=&quot;#problem&quot; style=&quot;display:inline-block;&quot;&gt;
            &lt;h2 id=&quot;problem&quot; style=&quot;color:red;&quot;&gt;
                Problem
            &lt;/h2&gt;
        &lt;/a&gt;
    
&lt;/div&gt;

&lt;p&gt;Consider the following &lt;a href=&quot;precipitation.csv&quot; target=&quot;_blank&quot;&gt;dataset&lt;/a&gt; containing the average annual precipitation in the US states between 1971-2000. Make a choropleth visualization of this precipitation data (either using the SI or the US-British units). Do not forget to add a color-bar to your visualization.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/visualization-avg-precipitation-choropleth/visualization-avg-precipitation-choropleth&quot;&gt;Visualizing the average precipitation among the US states&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;https://www.cdslab.org/recipes&quot;&gt;CDSLab Recipes - A repository for all sorts of problems with solutions&lt;/a&gt; on September 19, 2021.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Computing the first four moments of a sample]]></title>
  
  <link rel="alternate" type="text/html" href="https://www.cdslab.org/recipes/programming/stat-sample-mean-variance-skewness-kurtosis/stat-sample-mean-variance-skewness-kurtosis"/>
  <id>https://www.cdslab.org/recipes/programming/stat-sample-mean-variance-skewness-kurtosis/stat-sample-mean-variance-skewness-kurtosis</id>
  <published>2021-09-03T00:00:00-05:00</published>
  <updated>2021-09-07T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>https://www.cdslab.org/recipes</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  <category scheme="https://www.cdslab.org/recipes/tags/#statistics" term="statistics" /><category scheme="https://www.cdslab.org/recipes/tags/#sample" term="sample" /><category scheme="https://www.cdslab.org/recipes/tags/#moments" term="moments" /><category scheme="https://www.cdslab.org/recipes/tags/#mean" term="mean" /><category scheme="https://www.cdslab.org/recipes/tags/#variance" term="variance" /><category scheme="https://www.cdslab.org/recipes/tags/#skewness" term="skewness" /><category scheme="https://www.cdslab.org/recipes/tags/#kurtosis" term="kurtosis" /><category scheme="https://www.cdslab.org/recipes/tags/#Python" term="Python" />
  <content type="html">
  
    
&lt;div style=&quot;text-align:center;margin-top:3rem;margin-bottom:2rem;&quot;&gt;
    
        &lt;a href=&quot;#problem&quot; style=&quot;display:inline-block;&quot;&gt;
            &lt;h2 id=&quot;problem&quot; style=&quot;color:red;&quot;&gt;
                Problem
            &lt;/h2&gt;
        &lt;/a&gt;
    
&lt;/div&gt;

&lt;p&gt;Consider &lt;a href=&quot;gamrnd.txt&quot; target=&quot;blank&quot;&gt;this dataset&lt;/a&gt; comprised of $1000$ observations (tuples). Compute the first four standardized moments of this sample (mean, standard deviation, skewness, kurtosis).&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/stat-sample-mean-variance-skewness-kurtosis/stat-sample-mean-variance-skewness-kurtosis&quot;&gt;Computing the first four moments of a sample&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;https://www.cdslab.org/recipes&quot;&gt;CDSLab Recipes - A repository for all sorts of problems with solutions&lt;/a&gt; on September 03, 2021.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[An experimental proof of Chebyshev's inequality]]></title>
  
  <link rel="alternate" type="text/html" href="https://www.cdslab.org/recipes/programming/stat-sample-chebyshev-inequality/stat-sample-chebyshev-inequality"/>
  <id>https://www.cdslab.org/recipes/programming/stat-sample-chebyshev-inequality/stat-sample-chebyshev-inequality</id>
  <published>2021-09-03T00:00:00-05:00</published>
  <updated>2021-09-07T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>https://www.cdslab.org/recipes</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  <category scheme="https://www.cdslab.org/recipes/tags/#statistics" term="statistics" /><category scheme="https://www.cdslab.org/recipes/tags/#sample" term="sample" /><category scheme="https://www.cdslab.org/recipes/tags/#moments" term="moments" /><category scheme="https://www.cdslab.org/recipes/tags/#mean" term="mean" /><category scheme="https://www.cdslab.org/recipes/tags/#variance" term="variance" /><category scheme="https://www.cdslab.org/recipes/tags/#Chebyshev" term="Chebyshev" /><category scheme="https://www.cdslab.org/recipes/tags/#inequality" term="inequality" /><category scheme="https://www.cdslab.org/recipes/tags/#Python" term="Python" />
  <content type="html">
  
    
&lt;div style=&quot;text-align:center;margin-top:3rem;margin-bottom:2rem;&quot;&gt;
    
        &lt;a href=&quot;#problem&quot; style=&quot;display:inline-block;&quot;&gt;
            &lt;h2 id=&quot;problem&quot; style=&quot;color:red;&quot;&gt;
                Problem
            &lt;/h2&gt;
        &lt;/a&gt;
    
&lt;/div&gt;

&lt;p&gt;The Chebyshev Inequality states that no more than $1/k^2$ of an attribute values of a given sample can be $k$ or more standard deviations away from the attribute mean. Provide an experimental proof of this theorem by generating a sample of 10000 uniformly-distributed random numbers between 0 and 1 and computing the fractions of points that lie at larger distances than $[1\sigma, 1.5\sigma, 2\sigma, 2.5\sigma, 3\sigma, 3.5\sigma, 4\sigma]$ is less than or equal to $[1, 1/1.5^2, 1/2^2, 1/2.5^2, 1/3^2, 1/3.5^2, 1/4^2]$.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/stat-sample-chebyshev-inequality/stat-sample-chebyshev-inequality&quot;&gt;An experimental proof of Chebyshev's inequality&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;https://www.cdslab.org/recipes&quot;&gt;CDSLab Recipes - A repository for all sorts of problems with solutions&lt;/a&gt; on September 03, 2021.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Computing the mean of a weighted data]]></title>
  
  <link rel="alternate" type="text/html" href="https://www.cdslab.org/recipes/programming/stat-mean-weighted/stat-mean-weighted"/>
  <id>https://www.cdslab.org/recipes/programming/stat-mean-weighted/stat-mean-weighted</id>
  <published>2021-09-03T00:00:00-05:00</published>
  <updated>2019-07-04T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>https://www.cdslab.org/recipes</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  <category scheme="https://www.cdslab.org/recipes/tags/#statistics" term="statistics" /><category scheme="https://www.cdslab.org/recipes/tags/#sample" term="sample" /><category scheme="https://www.cdslab.org/recipes/tags/#weighted" term="weighted" /><category scheme="https://www.cdslab.org/recipes/tags/#mean" term="mean" /><category scheme="https://www.cdslab.org/recipes/tags/#Python" term="Python" />
  <content type="html">
  
    
&lt;div style=&quot;text-align:center;margin-top:3rem;margin-bottom:2rem;&quot;&gt;
    
        &lt;a href=&quot;#problem&quot; style=&quot;display:inline-block;&quot;&gt;
            &lt;h2 id=&quot;problem&quot; style=&quot;color:red;&quot;&gt;
                Problem
            &lt;/h2&gt;
        &lt;/a&gt;
    
&lt;/div&gt;

&lt;p&gt;Consider &lt;a href=&quot;weightedDataMVN.txt&quot; target=&quot;blank&quot;&gt;this weighted dataset&lt;/a&gt; comprised of $500$ observations (tuples) each of which is described by $5$ attributes. Note that the last column of data is the weight of each tuple. Compute the weighted mean of this sample.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/stat-mean-weighted/stat-mean-weighted&quot;&gt;Computing the mean of a weighted data&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;https://www.cdslab.org/recipes&quot;&gt;CDSLab Recipes - A repository for all sorts of problems with solutions&lt;/a&gt; on September 03, 2021.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Monte Carlo approximation of the number Pi]]></title>
  
  <link rel="alternate" type="text/html" href="https://www.cdslab.org/recipes/programming/monte-carlo-quadratic-integration-rejection-sampling/monte-carlo-quadratic-integration-rejection-sampling"/>
  <id>https://www.cdslab.org/recipes/programming/monte-carlo-quadratic-integration-rejection-sampling/monte-carlo-quadratic-integration-rejection-sampling</id>
  <published>2021-07-06T00:00:00-05:00</published>
  <updated>2019-07-04T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>https://www.cdslab.org/recipes</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  <category scheme="https://www.cdslab.org/recipes/tags/#Python" term="Python" /><category scheme="https://www.cdslab.org/recipes/tags/#numpy" term="numpy" /><category scheme="https://www.cdslab.org/recipes/tags/#matplotlib" term="matplotlib" /><category scheme="https://www.cdslab.org/recipes/tags/#visualization" term="visualization" /><category scheme="https://www.cdslab.org/recipes/tags/#Monte%20Carlo" term="Monte Carlo" /><category scheme="https://www.cdslab.org/recipes/tags/#rejection%20sampling" term="rejection sampling" /><category scheme="https://www.cdslab.org/recipes/tags/#integration" term="integration" /><category scheme="https://www.cdslab.org/recipes/tags/#quadratic" term="quadratic" /><category scheme="https://www.cdslab.org/recipes/tags/#simulation" term="simulation" /><category scheme="https://www.cdslab.org/recipes/tags/#plot" term="plot" /><category scheme="https://www.cdslab.org/recipes/tags/#line" term="line" /><category scheme="https://www.cdslab.org/recipes/tags/#figure" term="figure" /><category scheme="https://www.cdslab.org/recipes/tags/#random%20number" term="random number" /><category scheme="https://www.cdslab.org/recipes/tags/#probability" term="probability" />
  <content type="html">
  
    
&lt;div style=&quot;text-align:center;margin-top:3rem;margin-bottom:2rem;&quot;&gt;
    
        &lt;a href=&quot;#problem&quot; style=&quot;display:inline-block;&quot;&gt;
            &lt;h2 id=&quot;problem&quot; style=&quot;color:red;&quot;&gt;
                Problem
            &lt;/h2&gt;
        &lt;/a&gt;
    
&lt;/div&gt;

&lt;p&gt;Compute the following 10-dimensional integral via Monte Carlo Rejection sampling method,&lt;/p&gt;

\[I = \int_{x_1 = 0}^{x_1 = 1} dx_1 \cdots \int_{x_{10} = 0}^{x_{10} = 1} dx_{10} \bigg(\sum_{i=1}^{i=10} ~ x_i ~  \bigg) ~,\]

&lt;p&gt;Ensure the accuracy of your integration result is better than $0.00001$ by progressively comparing the integral with actual integration result $I = 155 / 6$.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/monte-carlo-quadratic-integration-rejection-sampling/monte-carlo-quadratic-integration-rejection-sampling&quot;&gt;Monte Carlo approximation of the number Pi&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;https://www.cdslab.org/recipes&quot;&gt;CDSLab Recipes - A repository for all sorts of problems with solutions&lt;/a&gt; on July 06, 2021.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Monte Carlo approximation of the number Pi using a full circle]]></title>
  
  <link rel="alternate" type="text/html" href="https://www.cdslab.org/recipes/programming/monte-carlo-approximation-of-pi-full-circle/monte-carlo-approximation-of-pi-full-circle"/>
  <id>https://www.cdslab.org/recipes/programming/monte-carlo-approximation-of-pi-full-circle/monte-carlo-approximation-of-pi-full-circle</id>
  <published>2021-05-03T00:00:00-05:00</published>
  <updated>2021-05-03T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>https://www.cdslab.org/recipes</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  <category scheme="https://www.cdslab.org/recipes/tags/#MATLAB" term="MATLAB" /><category scheme="https://www.cdslab.org/recipes/tags/#Python" term="Python" /><category scheme="https://www.cdslab.org/recipes/tags/#numpy" term="numpy" /><category scheme="https://www.cdslab.org/recipes/tags/#matplotlib" term="matplotlib" /><category scheme="https://www.cdslab.org/recipes/tags/#visualization" term="visualization" /><category scheme="https://www.cdslab.org/recipes/tags/#Monte%20Carlo" term="Monte Carlo" /><category scheme="https://www.cdslab.org/recipes/tags/#simulation" term="simulation" /><category scheme="https://www.cdslab.org/recipes/tags/#plot" term="plot" /><category scheme="https://www.cdslab.org/recipes/tags/#line" term="line" /><category scheme="https://www.cdslab.org/recipes/tags/#figure" term="figure" /><category scheme="https://www.cdslab.org/recipes/tags/#random%20number" term="random number" /><category scheme="https://www.cdslab.org/recipes/tags/#probability" term="probability" />
  <content type="html">
  
    
&lt;div style=&quot;text-align:center;margin-top:3rem;margin-bottom:2rem;&quot;&gt;
    
        &lt;a href=&quot;#problem&quot; style=&quot;display:inline-block;&quot;&gt;
            &lt;h2 id=&quot;problem&quot; style=&quot;color:red;&quot;&gt;
                Problem
            &lt;/h2&gt;
        &lt;/a&gt;
    
&lt;/div&gt;

&lt;p&gt;Suppose we did not know the value of $\pi$ and we wanted to estimate its value using Monte Carlo methods. One practical approach is to draw a square sides equal to $a = 2$, with its diagonal opposite corners extending from the coordinates origin $(-1,-1)$ to $(1,1)$. Now we try to simulate uniform random points from inside of this square by generating uniform random points along the $X$ and $Y$ axes, i.e., by generating two random uniform numbers (x,y) from the range $[-1,1]$.&lt;/p&gt;

&lt;p&gt;The generated random point $P$ has the coordinate $(x,y)$, so we can calculate its distance from the coordinate origin. Now, suppose we also draw a unit-radius ($r = 1$) inside of this square with its center at the origin $(0,0)$. The ratio of the area of this circle, $S_C$ to the area of the square enclosing it, $S_S$ is,&lt;/p&gt;

\[\frac{S_C}{S_S} = \frac{\pi r^2}{a^2} = \frac{1}{4}\pi\]

&lt;p&gt;This is because the area of the square with sides $a = 2$ is just 4. Therefore, if we can somehow measure the area of the circle $S_C$, then we can use the following equation, to get an estimate of $\pi$,&lt;/p&gt;

\[\pi = 4S_C\]

&lt;p&gt;To obtain, $S_C$, we are going to throw random points in the square, just as described above, and then find the fraction of points, $f=n_C/n_{\rm total}$, that fall inside this circle. This fraction is related to the area of the circle and square by the following equation,&lt;/p&gt;

\[f=\frac{n_C}{n_{\rm total}} = \frac{S_C}{S_S}\]

&lt;p&gt;Therefore, one can obtain an estimate of $\pi$ using this fraction,&lt;/p&gt;

\[\pi \approx 4\frac{n_C}{n_{\rm total}}\]

&lt;p&gt;Now, write a script that takes in the number of points to be simulated, and then calculates an approximate value for $\pi$ based on the Monte Carlo algorithm described above.  Write a second function that plot the estimate of $\pi$ versus the number of points stimulated, like the following,&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;approximatePI.png&quot; /&gt;
&lt;/figure&gt;


  
  &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/monte-carlo-approximation-of-pi-full-circle/monte-carlo-approximation-of-pi-full-circle&quot;&gt;Monte Carlo approximation of the number Pi using a full circle&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;https://www.cdslab.org/recipes&quot;&gt;CDSLab Recipes - A repository for all sorts of problems with solutions&lt;/a&gt; on May 03, 2021.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Monte Carlo approximation of the area of heart]]></title>
  
  <link rel="alternate" type="text/html" href="https://www.cdslab.org/recipes/programming/monte-carlo-approximation-of-heart-area/monte-carlo-approximation-of-heart-area"/>
  <id>https://www.cdslab.org/recipes/programming/monte-carlo-approximation-of-heart-area/monte-carlo-approximation-of-heart-area</id>
  <published>2021-05-03T00:00:00-05:00</published>
  <updated>2021-05-03T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>https://www.cdslab.org/recipes</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  <category scheme="https://www.cdslab.org/recipes/tags/#MATLAB" term="MATLAB" /><category scheme="https://www.cdslab.org/recipes/tags/#Python" term="Python" /><category scheme="https://www.cdslab.org/recipes/tags/#numpy" term="numpy" /><category scheme="https://www.cdslab.org/recipes/tags/#matplotlib" term="matplotlib" /><category scheme="https://www.cdslab.org/recipes/tags/#visualization" term="visualization" /><category scheme="https://www.cdslab.org/recipes/tags/#Monte%20Carlo" term="Monte Carlo" /><category scheme="https://www.cdslab.org/recipes/tags/#simulation" term="simulation" /><category scheme="https://www.cdslab.org/recipes/tags/#plot" term="plot" /><category scheme="https://www.cdslab.org/recipes/tags/#line" term="line" /><category scheme="https://www.cdslab.org/recipes/tags/#figure" term="figure" /><category scheme="https://www.cdslab.org/recipes/tags/#random%20number" term="random number" /><category scheme="https://www.cdslab.org/recipes/tags/#probability" term="probability" />
  <content type="html">
  
    
&lt;div style=&quot;text-align:center;margin-top:3rem;margin-bottom:2rem;&quot;&gt;
    
        &lt;a href=&quot;#problem&quot; style=&quot;display:inline-block;&quot;&gt;
            &lt;h2 id=&quot;problem&quot; style=&quot;color:red;&quot;&gt;
                Problem
            &lt;/h2&gt;
        &lt;/a&gt;
    
&lt;/div&gt;

&lt;p&gt;A popular mathematical equation for 2D heart is the following,&lt;/p&gt;

\[f(x,y) = (x^2 + y^2 - 1)^3 - x^2 y^3 = 0\]

&lt;p&gt;Any $(x,y)$ values that result in $f(x,y) &amp;lt; 0$ represent the coordinates of a point that falls inside the heart shape. Write a script that generates a heart shape via a set of random points uniformly distributed inside the heart shape. Estimate the area of the heart by drawing an appropriate box around the heart and sampling points randomly uniformly from this box and counting those that fall inside the heart. Here is a plot of the heart,&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;heart.png&quot; /&gt;
&lt;/figure&gt;


  
  &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/monte-carlo-approximation-of-heart-area/monte-carlo-approximation-of-heart-area&quot;&gt;Monte Carlo approximation of the area of heart&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;https://www.cdslab.org/recipes&quot;&gt;CDSLab Recipes - A repository for all sorts of problems with solutions&lt;/a&gt; on May 03, 2021.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Parsing data from the World Wide Web]]></title>
  
  <link rel="alternate" type="text/html" href="https://www.cdslab.org/recipes/programming/parsing-data-from-web/parsing-data-from-web"/>
  <id>https://www.cdslab.org/recipes/programming/parsing-data-from-web/parsing-data-from-web</id>
  <published>2021-04-12T00:00:00-05:00</published>
  <updated>2021-04-12T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>https://www.cdslab.org/recipes</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  <category scheme="https://www.cdslab.org/recipes/tags/#MATLAB" term="MATLAB" /><category scheme="https://www.cdslab.org/recipes/tags/#Python" term="Python" /><category scheme="https://www.cdslab.org/recipes/tags/#visualization" term="visualization" /><category scheme="https://www.cdslab.org/recipes/tags/#web" term="web" /><category scheme="https://www.cdslab.org/recipes/tags/#data%20transfer" term="data transfer" /><category scheme="https://www.cdslab.org/recipes/tags/#IO" term="IO" /><category scheme="https://www.cdslab.org/recipes/tags/#input" term="input" /><category scheme="https://www.cdslab.org/recipes/tags/#output" term="output" /><category scheme="https://www.cdslab.org/recipes/tags/#string" term="string" /><category scheme="https://www.cdslab.org/recipes/tags/#exception" term="exception" /><category scheme="https://www.cdslab.org/recipes/tags/#exception%20handling" term="exception handling" /><category scheme="https://www.cdslab.org/recipes/tags/#raise" term="raise" /><category scheme="https://www.cdslab.org/recipes/tags/#try-catch" term="try-catch" /><category scheme="https://www.cdslab.org/recipes/tags/#try-except" term="try-except" /><category scheme="https://www.cdslab.org/recipes/tags/#scatter%20plot" term="scatter plot" /><category scheme="https://www.cdslab.org/recipes/tags/#urllib" term="urllib" /><category scheme="https://www.cdslab.org/recipes/tags/#HTTPError" term="HTTPError" /><category scheme="https://www.cdslab.org/recipes/tags/#matplotlib" term="matplotlib" /><category scheme="https://www.cdslab.org/recipes/tags/#plot" term="plot" /><category scheme="https://www.cdslab.org/recipes/tags/#figure" term="figure" />
  <content type="html">
  
    
&lt;p&gt;Consider the following web-page address &lt;a href=&quot;https://cdslaborg.github.io/DataRepos_SwiftBat/index.html&quot; target=&quot;_blank&quot;&gt;https://cdslaborg.github.io/DataRepos_SwiftBat/index.html&lt;/a&gt;. This is a data table in HTML language containing data from the &lt;a href=&quot;https://www.nasa.gov/mission_pages/swift/main&quot; target=&quot;_blank&quot;&gt;NASA Swift satellite&lt;/a&gt;. Each row in this table represents information about a &lt;a href=&quot;https://en.wikipedia.org/wiki/Gamma-ray_burst&quot; target=&quot;_blank&quot;&gt;Gamma-Ray Burst (GRB)&lt;/a&gt; detection that Swift has made in the past years.&lt;/p&gt;

&lt;p&gt;Each event is labeled by an ID that appears in the first column of the table named &lt;code&gt;GRB (Trig#)&lt;/code&gt;. Write a code that (downloads) and reads this HTML page from the web, then extracts the IDs of GRB events from the first column (IDs are the numbers that appear in parentheses in the first column). Then, writes the extracted IDs to an external output file on your system with the name &lt;code&gt;nasa.swift.grb.ids.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that the IDs must be outputted as strings to preserve the preceding zeros. Each ID must appear on a separate line in the output file.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/parsing-data-from-web/parsing-data-from-web&quot;&gt;Parsing data from the World Wide Web&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;https://www.cdslab.org/recipes&quot;&gt;CDSLab Recipes - A repository for all sorts of problems with solutions&lt;/a&gt; on April 12, 2021.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Data transfer: Converting formatted input to Comma-Separated-Values (CSV) output]]></title>
  
  <link rel="alternate" type="text/html" href="https://www.cdslab.org/recipes/programming/formatted-input-to-csv-output/formatted-input-to-csv-output"/>
  <id>https://www.cdslab.org/recipes/programming/formatted-input-to-csv-output/formatted-input-to-csv-output</id>
  <published>2021-04-12T00:00:00-05:00</published>
  <updated>2021-04-12T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>https://www.cdslab.org/recipes</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  <category scheme="https://www.cdslab.org/recipes/tags/#MATLAB" term="MATLAB" /><category scheme="https://www.cdslab.org/recipes/tags/#Python" term="Python" /><category scheme="https://www.cdslab.org/recipes/tags/#input" term="input" /><category scheme="https://www.cdslab.org/recipes/tags/#output" term="output" /><category scheme="https://www.cdslab.org/recipes/tags/#IO" term="IO" /><category scheme="https://www.cdslab.org/recipes/tags/#command%20line" term="command line" /><category scheme="https://www.cdslab.org/recipes/tags/#argument" term="argument" /><category scheme="https://www.cdslab.org/recipes/tags/#function" term="function" /><category scheme="https://www.cdslab.org/recipes/tags/#exception" term="exception" /><category scheme="https://www.cdslab.org/recipes/tags/#for-loop" term="for-loop" />
  <content type="html">
  
    
&lt;div style=&quot;text-align:center;margin-top:3rem;margin-bottom:2rem;&quot;&gt;
    
        &lt;a href=&quot;#problem&quot; style=&quot;display:inline-block;&quot;&gt;
            &lt;h2 id=&quot;problem&quot; style=&quot;color:red;&quot;&gt;
                Problem
            &lt;/h2&gt;
        &lt;/a&gt;
    
&lt;/div&gt;

&lt;p&gt;Consider this formatted data file: &lt;a href=&quot;data.in&quot; target=&quot;_blank&quot;&gt;data.in&lt;/a&gt;. Write a simple script named &lt;code&gt;formatted2csv&lt;/code&gt; that takes two input arguments representing the input and output file names. Then, the script writes the same input float data to the output file &lt;code&gt;data.out&lt;/code&gt; &lt;strong&gt;in a comma-separated (CSV) style&lt;/strong&gt;, like this &lt;a href=&quot;data.python.out&quot; target=&quot;_blank&quot;&gt;example output file&lt;/a&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align:center;margin-top:4rem;margin-bottom:1rem;&quot;&gt;
    
    
    
    &lt;figure&gt;
        &lt;a href=&quot;#solution-python&quot; id=&quot;solution-python&quot;&gt;
            &lt;img src=&quot;https://www.cdslab.org/recipes/images/Python.png&quot; width=&quot;75px&quot; /&gt;
        &lt;/a&gt;
        &lt;figcaption&gt;
            &lt;a href=&quot;https://en.wikipedia.org/wiki/Python_(programming_language)&quot; target=&quot;_blank&quot;&gt;
                Python
            &lt;/a&gt;
        &lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Write your Python script in such a way that it takes the input and output file names from the Bash command line arguments, like the following,&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python formatted2csv.py data.in data.out
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;text-align:center;margin-top:4rem;margin-bottom:1rem;&quot;&gt;
    
    
    
    &lt;figure&gt;
        &lt;a href=&quot;#solution-matlab&quot; id=&quot;solution-matlab&quot;&gt;
            &lt;img src=&quot;https://www.cdslab.org/recipes/images/MATLAB.png&quot; width=&quot;75px&quot; /&gt;
        &lt;/a&gt;
        &lt;figcaption&gt;
            &lt;a href=&quot;https://en.wikipedia.org/wiki/MATLAB&quot; target=&quot;_blank&quot;&gt;
                MATLAB
            &lt;/a&gt;
        &lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Write your MATLAB script as a function that takes the input and output file names as input arguments to a function named &lt;code&gt;formatted2csv&lt;/code&gt;, so that it can be called like the following from the MATLAB command line.&lt;/p&gt;

&lt;div class=&quot;language-matlab highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;formatted2csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'data.in'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'data.matlab.out'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;


  
  &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/formatted-input-to-csv-output/formatted-input-to-csv-output&quot;&gt;Data transfer: Converting formatted input to Comma-Separated-Values (CSV) output&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;https://www.cdslab.org/recipes&quot;&gt;CDSLab Recipes - A repository for all sorts of problems with solutions&lt;/a&gt; on April 12, 2021.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Command line input option-value pairs]]></title>
  
  <link rel="alternate" type="text/html" href="https://www.cdslab.org/recipes/programming/command-line-input-option-value/command-line-input-option-value"/>
  <id>https://www.cdslab.org/recipes/programming/command-line-input-option-value/command-line-input-option-value</id>
  <published>2021-04-05T00:00:00-05:00</published>
  <updated>2021-04-05T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>https://www.cdslab.org/recipes</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  <category scheme="https://www.cdslab.org/recipes/tags/#Python" term="Python" /><category scheme="https://www.cdslab.org/recipes/tags/#input" term="input" /><category scheme="https://www.cdslab.org/recipes/tags/#IO" term="IO" /><category scheme="https://www.cdslab.org/recipes/tags/#command-line" term="command-line" /><category scheme="https://www.cdslab.org/recipes/tags/#physics" term="physics" /><category scheme="https://www.cdslab.org/recipes/tags/#gravity" term="gravity" /><category scheme="https://www.cdslab.org/recipes/tags/#free-fall" term="free-fall" />
  <content type="html">
  
    
&lt;div style=&quot;text-align:center;margin-top:3rem;margin-bottom:2rem;&quot;&gt;
    
        &lt;a href=&quot;#problem&quot; style=&quot;display:inline-block;&quot;&gt;
            &lt;h2 id=&quot;problem&quot; style=&quot;color:red;&quot;&gt;
                Problem
            &lt;/h2&gt;
        &lt;/a&gt;
    
&lt;/div&gt;

&lt;div style=&quot;text-align:center;margin-top:4rem;margin-bottom:1rem;&quot;&gt;
    
    
    
    &lt;figure&gt;
        &lt;a href=&quot;#problem-python&quot; id=&quot;problem-python&quot;&gt;
            &lt;img src=&quot;https://www.cdslab.org/recipes/images/Python.png&quot; width=&quot;75px&quot; /&gt;
        &lt;/a&gt;
        &lt;figcaption&gt;
            &lt;a href=&quot;https://en.wikipedia.org/wiki/Python_(programming_language)&quot; target=&quot;_blank&quot;&gt;
                Python
            &lt;/a&gt;
        &lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Suppose we want to write a program that takes in three input parameters: the initial height ($y_0$) &lt;code&gt;initHeight&lt;/code&gt;, the initial velocity ($v_0$) &lt;code&gt;initVelocity&lt;/code&gt;, the time after which we want to know how much a projectile has moved in the vertical direction from the initial height ($y_0$), and the gravity constant ($g$) &lt;code&gt;gravityConstant&lt;/code&gt;. Write the program such that it takes these three parameters as pairs of option (keyword) and values plus an additional option &lt;code&gt;unit&lt;/code&gt; which can have either &lt;code&gt;SI&lt;/code&gt; or &lt;code&gt;English&lt;/code&gt; values. Then it computes and prints the final height &lt;code&gt;finalHeight&lt;/code&gt; via the following equation,&lt;/p&gt;

\[y(t) = y_0 + v_0\times t + \frac{1}{2}g\times t^2 ~~,\]

&lt;p&gt;or in scripting terms,&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;finalHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initVelocity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gravityConstant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt; Write your code such that it works with the following example input option-value pair,&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python getHeight.py unit SI initHeight 0 initVelocity 0 &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;3 gravityConstant &lt;span class=&quot;nt&quot;&gt;-10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Compute the height for the same input values as in the above, but for the gravity constant of the Moon $g \sim 1.62 ms^{-2}$. How does it compare to Earth?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(B)&lt;/strong&gt; Rewrite your program such that the missing option value pairs from the input are assigned proper values. For example, if &lt;code&gt;initHeight&lt;/code&gt; is missing, it should be assigned a value of &lt;code&gt;0&lt;/code&gt;. If &lt;code&gt;initVelocity&lt;/code&gt; is missing, it should be assigned a value of &lt;code&gt;0&lt;/code&gt;. If &lt;code&gt;gravityConstant&lt;/code&gt; is missing, it should be assigned a value of &lt;code&gt;-10&lt;/code&gt; $m/s^2$ if the input &lt;code&gt;unit&lt;/code&gt; is &lt;code&gt;SI&lt;/code&gt;, otherwise it should be assigned &lt;code&gt;-32.17405&lt;/code&gt; $ft/s^2$. If the &lt;code&gt;unit&lt;/code&gt; is missing, it should be assigned &lt;code&gt;SI&lt;/code&gt; as the default value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(C)&lt;/strong&gt; Now rewrite your program such that the missing option value pairs would be read from an input file, if the &lt;code&gt;file path_to_file&lt;/code&gt; is given as option value pair. For example, your code should be able to parse the contents of these two example input files: &lt;a href=&quot;input.1.txt&quot; target=&quot;_blank&quot;&gt;input.1.txt&lt;/a&gt; or &lt;a href=&quot;input.2.txt&quot; target=&quot;_blank&quot;&gt;input.2.txt&lt;/a&gt;, when called with the &lt;code&gt;file&lt;/code&gt; command-line option (and it should ignore any other input command-line option other than &lt;code&gt;file&lt;/code&gt; and its value.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python getHeight.py file &lt;span class=&quot;s2&quot;&gt;&quot;input.1.txt&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;Final Height = -45.0 in SI units.
&lt;/code&gt;&lt;/pre&gt;


  
  &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/command-line-input-option-value/command-line-input-option-value&quot;&gt;Command line input option-value pairs&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;https://www.cdslab.org/recipes&quot;&gt;CDSLab Recipes - A repository for all sorts of problems with solutions&lt;/a&gt; on April 05, 2021.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Python modules and packaging]]></title>
  
  <link rel="alternate" type="text/html" href="https://www.cdslab.org/recipes/programming/python-packaging/python-packaging"/>
  <id>https://www.cdslab.org/recipes/programming/python-packaging/python-packaging</id>
  <published>2021-03-31T00:00:00-05:00</published>
  <updated>2021-03-31T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>https://www.cdslab.org/recipes</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  <category scheme="https://www.cdslab.org/recipes/tags/#MATLAB" term="MATLAB" /><category scheme="https://www.cdslab.org/recipes/tags/#Python" term="Python" /><category scheme="https://www.cdslab.org/recipes/tags/#Fibonacci%20sequence" term="Fibonacci sequence" /><category scheme="https://www.cdslab.org/recipes/tags/#recursive" term="recursive" /><category scheme="https://www.cdslab.org/recipes/tags/#function" term="function" /><category scheme="https://www.cdslab.org/recipes/tags/#recursive%20function" term="recursive function" /><category scheme="https://www.cdslab.org/recipes/tags/#branching" term="branching" /><category scheme="https://www.cdslab.org/recipes/tags/#isreal" term="isreal" /><category scheme="https://www.cdslab.org/recipes/tags/#round" term="round" /><category scheme="https://www.cdslab.org/recipes/tags/#str2double" term="str2double" /><category scheme="https://www.cdslab.org/recipes/tags/#input" term="input" /><category scheme="https://www.cdslab.org/recipes/tags/#string" term="string" />
  <content type="html">
  
    
&lt;div style=&quot;text-align:center;margin-top:3rem;margin-bottom:2rem;&quot;&gt;
    
        &lt;a href=&quot;#problem&quot; style=&quot;display:inline-block;&quot;&gt;
            &lt;h2 id=&quot;problem&quot; style=&quot;color:red;&quot;&gt;
                Problem
            &lt;/h2&gt;
        &lt;/a&gt;
    
&lt;/div&gt;

&lt;p&gt;Consider the following codes that compute the Fibonacci sequence using two different methods: &lt;a href=&quot;fib_recursive.py&quot; target=&quot;_blank&quot;&gt;fib_recursive.py&lt;/a&gt; and &lt;a href=&quot;fib_loop.py&quot; target=&quot;_blank&quot;&gt;fib_loop.py&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Put these two functions in a folder named &lt;code&gt;fib&lt;/code&gt; such that they can be imported as a Python package to your Python environment.&lt;/li&gt;
  &lt;li&gt;Rewrite these scripts such that they are imported as Python packages without being executed, while the functions are called if the scripts are executed as standalone Python code.&lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/python-packaging/python-packaging&quot;&gt;Python modules and packaging&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;https://www.cdslab.org/recipes&quot;&gt;CDSLab Recipes - A repository for all sorts of problems with solutions&lt;/a&gt; on March 31, 2021.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Logic NAND equivalence]]></title>
  
  <link rel="alternate" type="text/html" href="https://www.cdslab.org/recipes/programming/logic-a-nand-equivalence/logic/logic-a-nand-equivalence"/>
  <id>https://www.cdslab.org/recipes/programming/logic-a-nand-equivalence/logic/logic-a-nand-equivalence</id>
  <published>2020-11-01T00:00:00-05:00</published>
  <updated>2020-11-01T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>https://www.cdslab.org/recipes</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  <category scheme="https://www.cdslab.org/recipes/tags/#plausibility" term="plausibility" /><category scheme="https://www.cdslab.org/recipes/tags/#deduction" term="deduction" /><category scheme="https://www.cdslab.org/recipes/tags/#reasoning" term="reasoning" /><category scheme="https://www.cdslab.org/recipes/tags/#logic" term="logic" /><category scheme="https://www.cdslab.org/recipes/tags/#boolean" term="boolean" /><category scheme="https://www.cdslab.org/recipes/tags/#implication" term="implication" />
  <content type="html">
  
    
&lt;p&gt;We have learned that,&lt;/p&gt;

\[\begin{eqnarray}
    \bar{A} &amp;amp;=&amp;amp; A \uparrow A ~, \nonumber \\
    AB &amp;amp;=&amp;amp; (A \uparrow B) \uparrow (A \uparrow B) ~, \nonumber \\
    A + B &amp;amp;=&amp;amp; (A \uparrow A) \uparrow (B \uparrow B) ~, \nonumber
\end{eqnarray}\]

&lt;p&gt;Now, using the above expressions, show that,&lt;/p&gt;

\[(A \uparrow A) \uparrow ( ((A \uparrow B) \uparrow (A \uparrow B)) \uparrow ((A \uparrow B) \uparrow (A \uparrow B)) ) = A ~, \nonumber\]


  
  &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/logic-a-nand-equivalence/logic/logic-a-nand-equivalence&quot;&gt;Logic NAND equivalence&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;https://www.cdslab.org/recipes&quot;&gt;CDSLab Recipes - A repository for all sorts of problems with solutions&lt;/a&gt; on November 01, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[The major schools of thought in Probability Theory]]></title>
  
  <link rel="alternate" type="text/html" href="https://www.cdslab.org/recipes/programming/probability-schools-of-thought/probability-schools-of-thought"/>
  <id>https://www.cdslab.org/recipes/programming/probability-schools-of-thought/probability-schools-of-thought</id>
  <published>2020-10-21T00:00:00-05:00</published>
  <updated>2020-10-21T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>https://www.cdslab.org/recipes</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  <category scheme="https://www.cdslab.org/recipes/tags/#plausibility" term="plausibility" /><category scheme="https://www.cdslab.org/recipes/tags/#schools" term="schools" /><category scheme="https://www.cdslab.org/recipes/tags/#bayesian" term="bayesian" /><category scheme="https://www.cdslab.org/recipes/tags/#frequentist" term="frequentist" />
  <content type="html">
  
    
&lt;p&gt;Name four major schools of Probability Theory.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/probability-schools-of-thought/probability-schools-of-thought&quot;&gt;The major schools of thought in Probability Theory&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;https://www.cdslab.org/recipes&quot;&gt;CDSLab Recipes - A repository for all sorts of problems with solutions&lt;/a&gt; on October 21, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[The fundamental desiderata of Probability Theory]]></title>
  
  <link rel="alternate" type="text/html" href="https://www.cdslab.org/recipes/programming/probability-desiderata/probability-desiderata"/>
  <id>https://www.cdslab.org/recipes/programming/probability-desiderata/probability-desiderata</id>
  <published>2020-10-21T00:00:00-05:00</published>
  <updated>2020-10-21T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>https://www.cdslab.org/recipes</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  <category scheme="https://www.cdslab.org/recipes/tags/#plausibility" term="plausibility" /><category scheme="https://www.cdslab.org/recipes/tags/#deduction" term="deduction" /><category scheme="https://www.cdslab.org/recipes/tags/#reasoning" term="reasoning" /><category scheme="https://www.cdslab.org/recipes/tags/#logic" term="logic" /><category scheme="https://www.cdslab.org/recipes/tags/#boolean" term="boolean" /><category scheme="https://www.cdslab.org/recipes/tags/#implication" term="implication" />
  <content type="html">
  
    
&lt;p&gt;Name the three fundamental desiderata of Probability Theory.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/probability-desiderata/probability-desiderata&quot;&gt;The fundamental desiderata of Probability Theory&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;https://www.cdslab.org/recipes&quot;&gt;CDSLab Recipes - A repository for all sorts of problems with solutions&lt;/a&gt; on October 21, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Probability Theory: correspondence with commonsense]]></title>
  
  <link rel="alternate" type="text/html" href="https://www.cdslab.org/recipes/programming/probability-correspondence-with-common-sense/probability-correspondence-with-common-sense"/>
  <id>https://www.cdslab.org/recipes/programming/probability-correspondence-with-common-sense/probability-correspondence-with-common-sense</id>
  <published>2020-10-21T00:00:00-05:00</published>
  <updated>2020-10-21T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>https://www.cdslab.org/recipes</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  <category scheme="https://www.cdslab.org/recipes/tags/#plausibility" term="plausibility" /><category scheme="https://www.cdslab.org/recipes/tags/#deduction" term="deduction" /><category scheme="https://www.cdslab.org/recipes/tags/#reasoning" term="reasoning" /><category scheme="https://www.cdslab.org/recipes/tags/#logic" term="logic" /><category scheme="https://www.cdslab.org/recipes/tags/#boolean" term="boolean" /><category scheme="https://www.cdslab.org/recipes/tags/#implication" term="implication" /><category scheme="https://www.cdslab.org/recipes/tags/#commonsense" term="commonsense" />
  <content type="html">
  
    
&lt;p&gt;Show via an example Venn diagram that if,&lt;/p&gt;

&lt;figure&gt;&lt;img src=&quot;commonsense.png&quot; width=&quot;200&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;holds, then,&lt;/p&gt;

&lt;figure&gt;&lt;img src=&quot;result.png&quot; width=&quot;200&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;also holds.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/probability-correspondence-with-common-sense/probability-correspondence-with-common-sense&quot;&gt;Probability Theory: correspondence with commonsense&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;https://www.cdslab.org/recipes&quot;&gt;CDSLab Recipes - A repository for all sorts of problems with solutions&lt;/a&gt; on October 21, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[The proof of Bayes' Rule via Venn diagram]]></title>
  
  <link rel="alternate" type="text/html" href="https://www.cdslab.org/recipes/programming/probability-bayes-rule-proof-venn-disgram/probability-bayes-rule-proof-venn-disgram"/>
  <id>https://www.cdslab.org/recipes/programming/probability-bayes-rule-proof-venn-disgram/probability-bayes-rule-proof-venn-disgram</id>
  <published>2020-10-21T00:00:00-05:00</published>
  <updated>2020-09-30T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>https://www.cdslab.org/recipes</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  <category scheme="https://www.cdslab.org/recipes/tags/#plausibility" term="plausibility" /><category scheme="https://www.cdslab.org/recipes/tags/#deduction" term="deduction" /><category scheme="https://www.cdslab.org/recipes/tags/#reasoning" term="reasoning" /><category scheme="https://www.cdslab.org/recipes/tags/#logic" term="logic" /><category scheme="https://www.cdslab.org/recipes/tags/#boolean" term="boolean" /><category scheme="https://www.cdslab.org/recipes/tags/#implication" term="implication" />
  <content type="html">
  
    
&lt;p&gt;Prove the Bayes‚Äôs rule via Venn diagrams,&lt;/p&gt;

\[\pi(B|A) = \frac{ \pi(A|B) ~ \pi(B) } { \pi(A) } ~.\]


  
  &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/probability-bayes-rule-proof-venn-disgram/probability-bayes-rule-proof-venn-disgram&quot;&gt;The proof of Bayes' Rule via Venn diagram&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;https://www.cdslab.org/recipes&quot;&gt;CDSLab Recipes - A repository for all sorts of problems with solutions&lt;/a&gt; on October 21, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[The fundamental logical operators]]></title>
  
  <link rel="alternate" type="text/html" href="https://www.cdslab.org/recipes/programming/logic-fundamental-operations/logic-fundamental-operations"/>
  <id>https://www.cdslab.org/recipes/programming/logic-fundamental-operations/logic-fundamental-operations</id>
  <published>2020-10-21T00:00:00-05:00</published>
  <updated>2020-10-21T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>https://www.cdslab.org/recipes</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  <category scheme="https://www.cdslab.org/recipes/tags/#plausibility" term="plausibility" /><category scheme="https://www.cdslab.org/recipes/tags/#deduction" term="deduction" /><category scheme="https://www.cdslab.org/recipes/tags/#reasoning" term="reasoning" /><category scheme="https://www.cdslab.org/recipes/tags/#logic" term="logic" /><category scheme="https://www.cdslab.org/recipes/tags/#boolean" term="boolean" /><category scheme="https://www.cdslab.org/recipes/tags/#implication" term="implication" /><category scheme="https://www.cdslab.org/recipes/tags/#nand" term="nand" /><category scheme="https://www.cdslab.org/recipes/tags/#nor" term="nor" />
  <content type="html">
  
    
&lt;p&gt;Show that the following identities hold,&lt;/p&gt;

&lt;figure&gt;&lt;img src=&quot;threeFundamentals.png&quot; width=&quot;250&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;where the two arrow-up and arrow-down symbols represent the fundamental NAND and NOR operators,&lt;/p&gt;

&lt;figure&gt;&lt;img src=&quot;nand_nor.png&quot; width=&quot;200&quot; /&gt;&lt;/figure&gt;


  
  &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/logic-fundamental-operations/logic-fundamental-operations&quot;&gt;The fundamental logical operators&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;https://www.cdslab.org/recipes&quot;&gt;CDSLab Recipes - A repository for all sorts of problems with solutions&lt;/a&gt; on October 21, 2020.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Logic functions in terms of logic functions]]></title>
  
  <link rel="alternate" type="text/html" href="https://www.cdslab.org/recipes/programming/logic-functions-operations/logic-functions-operations"/>
  <id>https://www.cdslab.org/recipes/programming/logic-functions-operations/logic-functions-operations</id>
  <published>2020-10-21T00:00:00-05:00</published>
  <updated>2020-10-21T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>https://www.cdslab.org/recipes</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  <category scheme="https://www.cdslab.org/recipes/tags/#plausibility" term="plausibility" /><category scheme="https://www.cdslab.org/recipes/tags/#deduction" term="deduction" /><category scheme="https://www.cdslab.org/recipes/tags/#reasoning" term="reasoning" /><category scheme="https://www.cdslab.org/recipes/tags/#logic" term="logic" /><category scheme="https://www.cdslab.org/recipes/tags/#boolean" term="boolean" /><category scheme="https://www.cdslab.org/recipes/tags/#implication" term="implication" />
  <content type="html">
  
    
&lt;p&gt;Show that the following functions,&lt;/p&gt;

&lt;figure&gt;&lt;img src=&quot;truthTable.png&quot; width=&quot;350&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;can be written as,&lt;/p&gt;

&lt;figure&gt;&lt;img src=&quot;operations.png&quot; width=&quot;400&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;where the basis logic functions have the following truth table,&lt;/p&gt;

&lt;figure&gt;&lt;img src=&quot;basisTruthTable.png&quot; width=&quot;350&quot; /&gt;&lt;/figure&gt;


  
  &lt;p&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/logic-functions-operations/logic-functions-operations&quot;&gt;Logic functions in terms of logic functions&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;https://www.cdslab.org/recipes&quot;&gt;CDSLab Recipes - A repository for all sorts of problems with solutions&lt;/a&gt; on October 21, 2020.&lt;/p&gt;</content>
</entry>

</feed>
